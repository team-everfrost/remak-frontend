name: Deploy main

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: npm

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build
        run: npm run generate
        env:
          NODE_ENV: production
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ap-northeast-2'
          SOURCE_DIR: '.output/public'

      - name: Find all index.html paths in .output/public directory
        id: find_paths
        run: |
          paths=$(find .output/public -name index.html | sed 's/\.output\/public//g' | awk 'BEGIN{ORS=" "} {print}')
          echo "Found paths: $paths"
          echo "PATHS=$paths" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Invalidate Cloudfront
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION }} --paths ${{ env.PATHS }}
        env:
          PATHS: ${{ env.PATHS }}

      - name: Clean up S3 bucket
        run: |
          PREFIX="_nuxt/"

          # _nuxt/ 프리픽스로 시작하는 모든 S3 객체 가져오기
          aws s3api list-objects-v2 --bucket ${{ env.AWS_S3_BUCKET }} --prefix $PREFIX --output json | jq -r '.Contents[] | "\(.Key) \(.LastModified)"' | awk '{gsub(/T.*/,"",$2); print $0}' | sort -k2r > objects_by_date.txt

          # 각 날짜별로 파일 그룹화하고, 날짜만 추출하여 배열 생성
          DATES=($(cat objects_by_date.txt | cut -d ' ' -f2 | uniq))

          # 10개 이상의 그룹이 있을 경우, 가장 오래된 그룹부터 삭제
          if [ ${#DATES[@]} -gt 10 ]; then
            for i in $(seq 10 ${#DATES[@]}); do
              OLD_DATE=${DATES[$i-1]}
              echo "Deleting files from date $OLD_DATE"

              # 해당 날짜에 해당하는 파일 목록 추출
              grep " $OLD_DATE" objects_by_date.txt | cut -d ' ' -f1 | while read OBJ_KEY; do
                echo "Deleting $OBJ_KEY"
                aws s3 rm s3://${{ env.AWS_S3_BUCKET }}/$OBJ_KEY
              done
            done
          fi
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
